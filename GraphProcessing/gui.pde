/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void option_mean_clicked(GOption source, GEvent event) { //_CODE_:option_mean:495889:
  filter = new MeanFilter(windowSize);
} //_CODE_:option_mean:495889:

public void option_median_clicked(GOption source, GEvent event) { //_CODE_:option_median:750489:
  filter = new MedianFilter(windowSize);
} //_CODE_:option_median:750489:

public void option_mode_clicked(GOption source, GEvent event) { //_CODE_:option_mode:559635:
  filter = new MedianMeanFilter(windowSize);
} //_CODE_:option_mode:559635:

public void option_empty_clicked(GOption source, GEvent event) { //_CODE_:option_empty:776717:
  filter = new EmptyFilter();
} //_CODE_:option_empty:776717:

public void option_weigthm_clicked(GOption source, GEvent event) { //_CODE_:option_weightm:808971:
  filter = new WeightedMeanFilter(windowSize);
} //_CODE_:option_weightm:808971:

public void textfield_window_change(GTextField source, GEvent event) { //_CODE_:textfield_window:342111:
  if (event != GEvent.CHANGED) return;
  try {
    windowSize = Integer.parseInt(source.getText());
    filter = (Filter) filter.getClass().getConstructors()[0].newInstance(this, windowSize);
  } catch (Exception e) {
    if (e instanceof NumberFormatException) System.out.println("Invalid number");
    else e.printStackTrace();  
  }
} //_CODE_:textfield_window:342111:

public void button_calibrate_clicked(GButton source, GEvent event) {
  startCalibration();  
}



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Nervimpulser");
  togGroup1 = new GToggleGroup();
  option_mean = new GOption(this, 270, height - 30, 120, 20);
  option_mean.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  option_mean.setText("Mean Filter");
  option_mean.setTextBold();
  option_mean.setOpaque(false);
  option_mean.addEventHandler(this, "option_mean_clicked");
  option_median = new GOption(this, 140, height - 30, 120, 20);
  option_median.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  option_median.setText("Median Filter");
  option_median.setTextBold();
  option_median.setOpaque(false);
  option_median.addEventHandler(this, "option_median_clicked");
  option_mode = new GOption(this, 10, height - 30, 120, 20);
  option_mode.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  option_mode.setText("MM Filter");
  option_mode.setTextBold();
  option_mode.setOpaque(false);
  option_mode.addEventHandler(this, "option_mode_clicked");
  option_empty = new GOption(this, 530, height - 30, 120, 20);
  option_empty.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  option_empty.setText("#Nofilter");
  option_empty.setTextBold();
  option_empty.setOpaque(false);
  option_empty.addEventHandler(this, "option_empty_clicked");
  option_weightm = new GOption(this, 400, height - 30, 120, 20);
  option_weightm.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  option_weightm.setText("Weighted Mean");
  option_weightm.setTextBold();
  option_weightm.setOpaque(false);
  option_weightm.addEventHandler(this, "option_weigthm_clicked");
  togGroup1.addControl(option_mean);
  option_mean.setSelected(true);
  togGroup1.addControl(option_median);
  togGroup1.addControl(option_mode);
  togGroup1.addControl(option_empty);
  togGroup1.addControl(option_weightm);
  label_window = new GLabel(this, 670, height - 30, 80, 20);
  label_window.setText("Window size:");
  label_window.setTextBold();
  label_window.setOpaque(false);
  textfield_window = new GTextField(this, 750, height - 30, 60, 20, G4P.SCROLLBARS_NONE);
  textfield_window.setText(""+windowSize);
  textfield_window.setOpaque(true);
  textfield_window.addEventHandler(this, "textfield_window_change");
  button_calibrate = new GButton(this, width - 85, height - 35, 80, 30);
  button_calibrate.setText("Calibrate");
  button_calibrate.addEventHandler(this, "button_calibrate_clicked");
}

// Variable declarations 
// autogenerated do not edit
GToggleGroup togGroup1; 
GOption option_mean; 
GOption option_median; 
GOption option_mode; 
GOption option_empty; 
GOption option_weightm; 
GLabel label_window; 
GTextField textfield_window;
GButton button_calibrate;